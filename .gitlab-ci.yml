# This file is a template, and might need editing before it works on your project.
image: golang:latest

variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.com/dnsmichi/ci-monitoring-webcast-2020
  # Env vars used by the app
  HELLO_FROM: "our CI Monitoring Webcast"
  # Generated app name
  BINARY_NAME: tanuki      

include:
  template: Jobs/Code-Quality.gitlab-ci.yml

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
  - test
  - coverage
  - report
  - build
  - deploy

format:
  stage: test
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)

unit-test:
  stage: test
  script:
    - go test -race $(go list ./... | grep -v /vendor/)
    - go test -cover $(go list ./... | grep -v /vendor/) # this generates the coverage report to STDOUT + regex project setting
    - go test -coverprofile=.coverage.cov $(go list ./... | grep -v /vendor/) # this generates the output for the 'test-coverage-report' job
  artifacts:
    paths:
    - .coverage.cov

test-coverage-report:
  stage: coverage
  needs: ["unit-test"]
  coverage: /regular total:\s+\(statements\)\s+\d+.\d+\%/
  variables:
    COV_FILENAME: coverage-$CI_COMMIT_BRANCH-job-$CI_JOB_ID.html
  script:
    - go tool cover -func .coverage.cov
    - go tool cover -html=.coverage.cov -o public/$(echo $COV_FILENAME | sed -e 's/\//___/g') # replace slashes in branch names
  artifacts:
    paths:
    - public/coverage*.html

test-junit-report:
  stage: coverage
  needs: ["unit-test"]
  before_script:
    - go get -u github.com/jstemmer/go-junit-report
  script:
    - go test -v
    - go test -v 2>&1 | go-junit-report
    - go test -v 2>&1 | go-junit-report -set-exit-code > report.xml
  artifacts:
    reports:
      junit: report.xml

pages:
  stage: report
  needs: ["test-coverage-report"]
  before_script:
    - apt-get update && apt-get -y install tree
  script:
    - echo "Deploying coverage reports to pages"
    - tree ./public -H '.' -T "$title" -I "reveal*|img*|style*|index*|content*" --noreport --charset utf-8 > ./public/index.html
  artifacts:
    paths:
    - public

compile:
  stage: build
  script:
    - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/$BINARY_NAME
  artifacts:
    paths:
      - $BINARY_NAME

run:
  stage: deploy
  script:
    - ./$BINARY_NAME       
