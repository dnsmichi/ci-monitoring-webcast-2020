# This file is a template, and might need editing before it works on your project.
image: golang:latest

variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.com/dnsmichi/ci-monitoring-webcast-2020
  # Env vars used by the app
  HELLO_FROM: "our CI Monitoring Webcast"
  # Generated app name
  BINARY_NAME: tanuki      

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
  - test
  - coverage
  - build
  - deploy

format:
  stage: test
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)

unit-test:
  stage: test
  script:
    - go test -race $(go list ./... | grep -v /vendor/)
    - go test -coverprofile=coverage.cov $(go list ./... | grep -v /vendor/)

test-coverage-report:
  stage: coverage
  needs: ["unit-test"]
  coverage: /regular total:\s+\(statements\)\s+\d+.\d+\%/
  script:
    - go tool cover -func .coverage.cov
    - go tool cover -html=.coverage.cov -o public/coverage.html
  artifacts:
    paths:
    - public/coverage.html

test-junit-report:
  stage: coverage
  before_script:
    - go get -u github.com/jstemmer/go-junit-report
  script:
    - go test -v $(go list ./... | grep -v /vendor/) 2>&1 | go-junit-report -set-exit-code > report.xml
  artifacts:
    reports:
      junit: report.xml


compile:
  stage: build
  script:
    - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/$BINARY_NAME
  artifacts:
    paths:
      - $BINARY_NAME

run:
  stage: deploy
  script:
    - ./$BINARY_NAME       
